name: Deploy to Development Server

on:
  pull_request:
    branches: [ develop ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to deploy'
        required: false
        type: string

jobs:
  deploy-development:
    runs-on: ubuntu-latest
    
  
    env:
      SERVER_URL: http://${{ secrets.DEV_VPS_HOST }}:3001
    
    environment:
      name: development
      url: ${{ env.SERVER_URL }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.pr_number != '' && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.head_ref }}
    
    - name: Prepare and Deploy
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_VPS_HOST }}
        username: ubuntu
        key: ${{ secrets.DEV_VPS_SSH_KEY }}
        debug: true
        script_stop: false
        script: |
          # Create and clean directory
          mkdir -p ~/component-store-api-dev
          rm -rf ~/component-store-api-dev/*
          
          echo "Directory prepared successfully"
    
    - name: Copy Files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DEV_VPS_HOST }}
        username: ubuntu
        key: ${{ secrets.DEV_VPS_SSH_KEY }}
        debug: true
        source: "."
        target: "~/component-store-api-dev/"
        overwrite: true
        rm: false
        exclude: ".git,.github,node_modules"
    
    - name: Deploy with Docker
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_VPS_HOST }}
        username: ubuntu
        key: ${{ secrets.DEV_VPS_SSH_KEY }}
        debug: true
        script_stop: false
        script: |
          cd ~/component-store-api-dev
          
          # Create .env file
          cat > .env << EOL
          PORT=3000
          PAYPAL_API_CLIENT=${{ secrets.PAYPAL_API_CLIENT }}
          PAYPAL_API_SECRET=${{ secrets.PAYPAL_API_SECRET }}
          PAYPAL_API_URL=https://api.sandbox.paypal.com
          HOST=${{ env.SERVER_URL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          NODE_ENV=development
          EOL
          
          # Install Docker if needed
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          
          # Create docker-compose file
          cat > docker-compose.dev.yaml << 'EOL'
          version: "3.8"

          services:
            api-dev:
              build:
                context: .
                dockerfile: Dockerfile
              container_name: component-store-api-dev
              restart: unless-stopped
              ports:
                - "3001:3000"
              environment:
                NODE_ENV: development
                PORT: 3000
                DATABASE_URL: ${DATABASE_URL}
                PAYPAL_API_CLIENT: ${PAYPAL_API_CLIENT}
                PAYPAL_API_SECRET: ${PAYPAL_API_SECRET}
                PAYPAL_API_URL: ${PAYPAL_API_URL}
                HOST: ${HOST}
                JWT_SECRET: ${JWT_SECRET}
              volumes:
                - ./src/public:/app/src/public:ro
              command: sh -c "npx prisma migrate deploy && npm run dev"
          EOL
          
          # Build and run
          sudo docker-compose -f docker-compose.dev.yaml down || true
          sudo docker-compose -f docker-compose.dev.yaml build --no-cache
          sudo docker-compose -f docker-compose.dev.yaml up -d
          
          # Run migrations
          sleep 15
          sudo docker-compose -f docker-compose.dev.yaml exec -T api-dev npx prisma migrate deploy || echo "Migrations already applied"
          
          # Verify deployment
          sleep 10
          if sudo docker ps | grep -q component-store-api-dev; then
            echo "Container running successfully"
          else
            echo "Container failed to start"
            sudo docker-compose -f docker-compose.dev.yaml logs
          fi
          
          # Cleanup
          sudo docker image prune -f
          sudo docker system prune -f