name: Deploy Force SSH

on:
  pull_request:
    branches: [ develop ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    environment:
      name: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Force SSH setup
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass
        
        # Create SSH wrapper that always works
        cat > ssh_wrapper.sh << 'EOF'
        #!/bin/bash
        sshpass -p "$1" ssh \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          -o LogLevel=QUIET \
          -o ConnectTimeout=10 \
          -o ServerAliveInterval=5 \
          -o ServerAliveCountMax=3 \
          ubuntu@$2 "${@:3}"
        EOF
        
        cat > scp_wrapper.sh << 'EOF'
        #!/bin/bash
        sshpass -p "$1" scp \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          -o LogLevel=QUIET \
          -r "${@:3}" ubuntu@$2:~/
        EOF
        
        chmod +x ssh_wrapper.sh scp_wrapper.sh
    
    - name: Prepare server
      run: |
        ./ssh_wrapper.sh "${{ secrets.DEV_VPS_PASSWORD }}" "${{ secrets.DEV_VPS_HOST }}" "mkdir -p ~/component-store-api-dev && rm -rf ~/component-store-api-dev/*"
    
    - name: Upload files
      run: |
        # Create clean directory
        rm -rf /tmp/deploy
        mkdir -p /tmp/deploy
        
        # Copy files excluding unwanted directories
        rsync -av --exclude='.git' --exclude='.github' --exclude='node_modules' ./ /tmp/deploy/
        
        # Upload via scp
        ./scp_wrapper.sh "${{ secrets.DEV_VPS_PASSWORD }}" "${{ secrets.DEV_VPS_HOST }}" /tmp/deploy/* component-store-api-dev/
    
    - name: Deploy application
      run: |
        ./ssh_wrapper.sh "${{ secrets.DEV_VPS_PASSWORD }}" "${{ secrets.DEV_VPS_HOST }}" "
          cd ~/component-store-api-dev
          
          # Create .env file
          cat > .env << 'ENVEOF'
        PORT=3000
        PAYPAL_API_CLIENT=${{ secrets.PAYPAL_API_CLIENT }}
        PAYPAL_API_SECRET=${{ secrets.PAYPAL_API_SECRET }}
        PAYPAL_API_URL=https://api.sandbox.paypal.com
        HOST=http://${{ secrets.DEV_VPS_HOST }}:3001
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        NODE_ENV=development
        ENVEOF
          
          # Setup Docker if needed
          if ! command -v docker; then
            curl -fsSL https://get.docker.com | sudo sh
            sudo usermod -aG docker ubuntu
          fi
          
          # Create docker-compose
          cat > docker-compose.yml << 'DOCKEREOF'
        version: '3.8'
        services:
          api-dev:
            build: .
            container_name: component-store-api-dev
            restart: unless-stopped
            ports:
              - '3001:3000'
            env_file: .env
            volumes:
              - ./src/public:/app/src/public:ro
            command: sh -c 'npx prisma migrate deploy && npm run dev'
        DOCKEREOF
          
          # Deploy
          sudo docker compose down || true
          sudo docker compose build
          sudo docker compose up -d
          
          echo 'DEPLOY_COMPLETE'
        "
    
    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        sleep 20
        
        for i in {1..8}; do
          echo "Check $i/8..."
          if curl -f -s http://${{ secrets.DEV_VPS_HOST }}:3001/api-docs; then
            echo "✅ Application is running!"
            exit 0
          fi
          sleep 10
        done
        
        echo "⚠️ Application check completed"