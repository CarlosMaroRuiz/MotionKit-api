name: Deploy to Development Server

on:
  pull_request:
    branches: [ develop ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to deploy (optional)'
        required: false
        type: string

jobs:
  deploy-development:
    runs-on: ubuntu-latest
    
    env:
      SERVER_URL: http://${{ secrets.DEV_VPS_HOST }}:3001
    
    environment:
      name: development
      url: ${{ env.SERVER_URL }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.pr_number != '' && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.head_ref }}

    # Debug step to see what's going on
    - name: Debug environment
      run: |
        echo "Home directory: $HOME"
        ls -la $HOME
        whoami
        pwd
    
    # Try a simpler SSH setup
    - name: Setup SSH
      run: |
        # Create temporary directory instead of using ~/.ssh
        mkdir -p ./ssh_temp
        echo "${{ secrets.DEV_VPS_SSH_KEY }}" > ./ssh_temp/id_rsa
        chmod 600 ./ssh_temp/id_rsa
        
        # Test SSH connection
        ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ./ssh_temp/id_rsa ubuntu@${{ secrets.DEV_VPS_HOST }} "echo Connected successfully"
    
    # Simplify the entire process to be more direct
    - name: Deploy
      run: |
        # Use temporary SSH directory
        export SSH_KEY_PATH="./ssh_temp/id_rsa"
        
        # Create directory on server
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i $SSH_KEY_PATH ubuntu@${{ secrets.DEV_VPS_HOST }} "mkdir -p ~/component-store-api-dev && rm -rf ~/component-store-api-dev/*"
        
        # Copy files
        scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i $SSH_KEY_PATH -r ./* ubuntu@${{ secrets.DEV_VPS_HOST }}:~/component-store-api-dev/
        
        # Create .env file directly on server
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i $SSH_KEY_PATH ubuntu@${{ secrets.DEV_VPS_HOST }} "cat > ~/component-store-api-dev/.env << EOL
        PORT=3000
        PAYPAL_API_CLIENT=${{ secrets.PAYPAL_API_CLIENT }}
        PAYPAL_API_SECRET=${{ secrets.PAYPAL_API_SECRET }}
        PAYPAL_API_URL=https://api.sandbox.paypal.com
        HOST=${{ env.SERVER_URL }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        NODE_ENV=development
        EOL"
        
        # Create docker-compose file and deploy
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i $SSH_KEY_PATH ubuntu@${{ secrets.DEV_VPS_HOST }} "cd ~/component-store-api-dev && cat > docker-compose.dev.yaml << 'EOL'
        version: \"3.8\"
        
        services:
          api-dev:
            build:
              context: .
              dockerfile: Dockerfile
            container_name: component-store-api-dev
            restart: unless-stopped
            ports:
              - \"3001:3000\"
            environment:
              NODE_ENV: development
              PORT: 3000
              DATABASE_URL: \${DATABASE_URL}
              PAYPAL_API_CLIENT: \${PAYPAL_API_CLIENT}
              PAYPAL_API_SECRET: \${PAYPAL_API_SECRET}
              PAYPAL_API_URL: \${PAYPAL_API_URL}
              HOST: \${HOST}
              JWT_SECRET: \${JWT_SECRET}
            volumes:
              - ./src/public:/app/src/public:ro
            command: sh -c \"npx prisma migrate deploy && npm run dev\"
        EOL
        
        sudo docker-compose -f docker-compose.dev.yaml down || true
        sudo docker-compose -f docker-compose.dev.yaml build --no-cache
        sudo docker-compose -f docker-compose.dev.yaml up -d
        
        # Verify deployment
        sleep 15
        if sudo docker ps | grep -q component-store-api-dev; then
          echo \"Container running successfully\"
        else
          echo \"Container failed to start\"
          sudo docker-compose -f docker-compose.dev.yaml logs
        fi"