name: Deploy to Development Server

on:
  pull_request:
    branches: [ develop ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to deploy (optional)'
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    environment:
      name: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.pr_number != '' && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.head_ref }}
    
    - name: Setup remote directory
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.DEV_VPS_HOST }}
        username: ubuntu
        password: ${{ secrets.DEV_VPS_PASSWORD }}
        timeout: 300s
        script: |
          mkdir -p ~/component-store-api-dev
          rm -rf ~/component-store-api-dev/*
          echo "Directorio preparado correctamente"
    
    - name: Copy files to VPS
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.DEV_VPS_HOST }}
        username: ubuntu
        password: ${{ secrets.DEV_VPS_PASSWORD }}
        timeout: 300s
        source: "./"
        target: "~/component-store-api-dev/"
        rm: true
        strip_components: 1
    
    - name: Create .env file and deploy
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.DEV_VPS_HOST }}
        username: ubuntu
        password: ${{ secrets.DEV_VPS_PASSWORD }}
        timeout: 600s
        script: |
          cd ~/component-store-api-dev
          
          echo "Creando archivo .env..."
          cat > .env << EOL
          PORT=3000
          PAYPAL_API_CLIENT=${{ secrets.PAYPAL_API_CLIENT }}
          PAYPAL_API_SECRET=${{ secrets.PAYPAL_API_SECRET }}
          PAYPAL_API_URL=https://api.sandbox.paypal.com
          HOST=http://${{ secrets.DEV_VPS_HOST }}:3001
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          NODE_ENV=development
          EOL
          
          echo "Verificando instalaci√≥n de Docker..."
          if ! command -v docker &> /dev/null; then
            echo "Instalando Docker..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            echo "Docker instalado correctamente"
          else
            echo "Docker ya est√° instalado"
          fi
          
          echo "Creando docker-compose.dev.yaml..."
          cat > docker-compose.dev.yaml << "EOL"
          version: "3.8"
          
          services:
            api-dev:
              build:
                context: .
                dockerfile: Dockerfile
              container_name: component-store-api-dev
              restart: unless-stopped
              ports:
                - "3001:3000"
              environment:
                NODE_ENV: development
                PORT: 3000
                DATABASE_URL: ${DATABASE_URL}
                PAYPAL_API_CLIENT: ${PAYPAL_API_CLIENT}
                PAYPAL_API_SECRET: ${PAYPAL_API_SECRET}
                PAYPAL_API_URL: ${PAYPAL_API_URL}
                HOST: ${HOST}
                JWT_SECRET: ${JWT_SECRET}
              volumes:
                - ./src/public:/app/src/public:ro
              command: sh -c "npx prisma migrate deploy && npm run dev"
          EOL
          
          echo "Iniciando despliegue..."
          # Detener contenedores existentes
          sudo docker compose -f docker-compose.dev.yaml down 2>/dev/null || true
          
          # Construir y desplegar
          echo "Construyendo imagen..."
          sudo docker compose -f docker-compose.dev.yaml build --no-cache
          
          echo "Iniciando contenedores..."
          sudo docker compose -f docker-compose.dev.yaml up -d
          
          # Verificar estado
          echo "Estado de los contenedores:"
          sudo docker ps | grep component-store-api-dev || echo "Contenedor no encontrado"
          
          # Esperar a que el contenedor est√© listo
          echo "Esperando a que la aplicaci√≥n est√© lista..."
          sleep 20
          
          # Ejecutar migraciones si es necesario
          echo "Ejecutando migraciones..."
          sudo docker compose -f docker-compose.dev.yaml exec -T api-dev npx prisma migrate deploy || echo "Migrations already applied or failed"
          
          # Limpieza de im√°genes no utilizadas
          echo "Limpiando im√°genes no utilizadas..."
          sudo docker image prune -f
          sudo docker system prune -f
          
          echo "Despliegue completado!"
    
    - name: Verify Deployment
      run: |
        echo "Verificando que la aplicaci√≥n est√° en funcionamiento..."
        sleep 10
        
        # Intentar conectarse a la API
        for i in {1..5}; do
          if curl -s http://${{ secrets.DEV_VPS_HOST }}:3001/api-docs; then
            echo "‚úÖ Aplicaci√≥n respondiendo correctamente"
            break
          else
            echo "‚è≥ Intento $i/5 - Esperando respuesta de la aplicaci√≥n..."
            sleep 10
          fi
        done
        
        echo "üìä Verificaci√≥n completada