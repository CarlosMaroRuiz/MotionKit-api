name: Deploy to Development Server

on:
  pull_request:
    branches: [ develop ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to deploy (optional)'
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    environment:
      name: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.pr_number != '' && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.head_ref }}
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.DEV_VPS_SSH_KEY }}
    
    # En lugar de ssh-keyscan, configuramos directamente para ignorar verificación de host
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "Host ${{ secrets.DEV_VPS_HOST }}" > ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config
        echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
        chmod 600 ~/.ssh/config
    
    - name: Setup remote directory
      run: |
        ssh ubuntu@${{ secrets.DEV_VPS_HOST }} '
          mkdir -p ~/component-store-api-dev
          rm -rf ~/component-store-api-dev/*
        '
    
    - name: Copy files to VPS
      run: |
        rsync -avz --exclude='.git' --exclude='.github' --exclude='node_modules' ./ ubuntu@${{ secrets.DEV_VPS_HOST }}:~/component-store-api-dev/
    
    - name: Create .env file
      run: |
        ssh ubuntu@${{ secrets.DEV_VPS_HOST }} '
          cat > ~/component-store-api-dev/.env << EOL
        PORT=3000
        PAYPAL_API_CLIENT=${{ secrets.PAYPAL_API_CLIENT }}
        PAYPAL_API_SECRET=${{ secrets.PAYPAL_API_SECRET }}
        PAYPAL_API_URL=https://api.sandbox.paypal.com
        HOST=http://${{ secrets.DEV_VPS_HOST }}:3001
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        NODE_ENV=development
        EOL
        '
    
    - name: Install Docker and deploy
      run: |
        ssh ubuntu@${{ secrets.DEV_VPS_HOST }} '
          cd ~/component-store-api-dev
          
          # Instalar Docker si no está instalado
          if ! command -v docker &> /dev/null; then
            echo "Instalando Docker..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          
          # Crear docker-compose.dev.yaml
          cat > docker-compose.dev.yaml << "EOL"
          version: "3.8"
          
          services:
            api-dev:
              build:
                context: .
                dockerfile: Dockerfile
              container_name: component-store-api-dev
              restart: unless-stopped
              ports:
                - "3001:3000"
              environment:
                NODE_ENV: development
                PORT: 3000
                DATABASE_URL: ${DATABASE_URL}
                PAYPAL_API_CLIENT: ${PAYPAL_API_CLIENT}
                PAYPAL_API_SECRET: ${PAYPAL_API_SECRET}
                PAYPAL_API_URL: ${PAYPAL_API_URL}
                HOST: ${HOST}
                JWT_SECRET: ${JWT_SECRET}
              volumes:
                - ./src/public:/app/src/public:ro
              command: sh -c "npx prisma migrate deploy && npm run dev"
          EOL
          
          # Desplegar con Docker
          echo "Construyendo imagen desde el Dockerfile..."
          sudo docker-compose -f docker-compose.dev.yaml down || true
          sudo docker-compose -f docker-compose.dev.yaml build --no-cache
          sudo docker-compose -f docker-compose.dev.yaml up -d
          
          # Verificar estado
          echo "Estado de los contenedores:"
          sudo docker ps
          
          # Ejecutar migraciones
          sleep 15
          sudo docker-compose -f docker-compose.dev.yaml exec -T api-dev npx prisma migrate deploy || echo "Migrations already applied"
          
          # Limpieza
          sudo docker image prune -f
          sudo docker system prune -f
        '
    
    - name: Verify Deployment
      run: |
        echo "Verificando que la aplicación está en funcionamiento..."
        sleep 10
        curl -s http://${{ secrets.DEV_VPS_HOST }}:3001/api-docs || echo "La aplicación aún no responde. Puede ser necesario revisar los logs."