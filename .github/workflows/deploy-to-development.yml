name: Deploy Development Final

on:
  pull_request:
    branches: [ develop ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to deploy (optional)'
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    environment:
      name: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.pr_number != '' && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.head_ref }}
    
    - name: Install dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y sshpass
    
    - name: Prepare deployment
      run: |
        sshpass -p "${{ secrets.DEV_VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR ubuntu@${{ secrets.DEV_VPS_HOST }} 'mkdir -p ~/component-store-api-dev && rm -rf ~/component-store-api-dev/*'
    
    - name: Copy project files
      run: |
        sshpass -p "${{ secrets.DEV_VPS_PASSWORD }}" rsync -avz -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR" --exclude='.git' --exclude='.github' --exclude='node_modules' ./ ubuntu@${{ secrets.DEV_VPS_HOST }}:~/component-store-api-dev/
    
    - name: Deploy application
      run: |
        sshpass -p "${{ secrets.DEV_VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR ubuntu@${{ secrets.DEV_VPS_HOST }} << 'DEPLOY_SCRIPT'
        cd ~/component-store-api-dev
        
        # Create environment file
        cat > .env << 'ENV_FILE'
        PORT=3000
        PAYPAL_API_CLIENT=${{ secrets.PAYPAL_API_CLIENT }}
        PAYPAL_API_SECRET=${{ secrets.PAYPAL_API_SECRET }}
        PAYPAL_API_URL=https://api.sandbox.paypal.com
        HOST=http://${{ secrets.DEV_VPS_HOST }}:3001
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        NODE_ENV=development
        ENV_FILE
        
        # Install Docker if needed
        if ! command -v docker >/dev/null 2>&1; then
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo usermod -aG docker ubuntu
          sudo systemctl start docker
          sudo systemctl enable docker
        fi
        
        # Create docker-compose file
        cat > docker-compose.yml << 'COMPOSE_FILE'
        version: "3.8"
        services:
          api-dev:
            build:
              context: .
              dockerfile: Dockerfile
            container_name: component-store-api-dev
            restart: unless-stopped
            ports:
              - "3001:3000"
            env_file:
              - .env
            volumes:
              - ./src/public:/app/src/public:ro
            command: sh -c "npx prisma migrate deploy && npm run dev"
        COMPOSE_FILE
        
        # Deploy
        sudo docker compose down 2>/dev/null || true
        sudo docker compose build --no-cache
        sudo docker compose up -d
        
        # Wait and check
        sleep 20
        sudo docker ps | grep component-store-api-dev && echo "Container running" || echo "Container not found"
        
        DEPLOY_SCRIPT
    
    - name: Health check
      run: |
        echo "Checking application health..."
        for i in {1..6}; do
          if curl -s http://${{ secrets.DEV_VPS_HOST }}:3001/api-docs >/dev/null; then
            echo "Application is running successfully!"
            exit 0
          fi
          echo "Attempt $i/6 - waiting..."
          sleep 10
        done
        echo "Health check completed"