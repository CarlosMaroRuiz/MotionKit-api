name: Deploy to Development Server 

on:
  pull_request:
    branches: [ develop ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to deploy (optional)'
        required: false
        type: string

jobs:
  deploy-development:
    runs-on: ubuntu-latest
    
    environment:
      name: development
      url: http://${{ secrets.DEV_VPS_HOST }}:3001 
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.pr_number ? 'refs/pull/${{ github.event.inputs.pr_number }}/head' : github.head_ref }}
    
    - name: Setup and Deploy to Development Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_VPS_HOST }}
        username: ubuntu
        key: ${{ secrets.DEV_VPS_SSH_KEY }}
        script: |
          # Create directory if it doesn't exist
          mkdir -p ~/component-store-api-dev
          
          # Clean previous directory
          rm -rf ~/component-store-api-dev/*
    
    - name: Copy files to Development Server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DEV_VPS_HOST }}
        username: ubuntu
        key: ${{ secrets.DEV_VPS_SSH_KEY }}
        source: "."
        target: "~/component-store-api-dev/"
        overwrite: true
        rm: false
        exclude: ".git,.github,node_modules"
    
    - name: Create .env file and Deploy
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_VPS_HOST }}
        username: ubuntu
        key: ${{ secrets.DEV_VPS_SSH_KEY }}
        script: |
          cd ~/component-store-api-dev
          
          # Create .env file for development
          cat > .env << EOL
          PORT=3000
          PAYPAL_API_CLIENT=${{ secrets.PAYPAL_API_CLIENT }}
          PAYPAL_API_SECRET=${{ secrets.PAYPAL_API_SECRET }}
          PAYPAL_API_URL=https://api.sandbox.paypal.com
          HOST=http://${{ secrets.DEV_VPS_HOST }}:3001
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          NODE_ENV=development
          EOL
    
    - name: Check Docker Installation
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_VPS_HOST }}
        username: ubuntu
        key: ${{ secrets.DEV_VPS_SSH_KEY }}
        script: |
          # Check if Docker is installed
          if ! command -v docker &> /dev/null || ! command -v docker-compose &> /dev/null; then
            echo "Docker or docker-compose not found, installing..."
            
            # Update package index
            sudo apt-get update
            
            # Install required packages
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            
            # Add Docker's official GPG key
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            
            # Set up the stable Docker repository
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            
            # Update the package index again
            sudo apt-get update
            
            # Install Docker CE
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            
            # Start and enable Docker
            sudo systemctl start docker
            sudo systemctl enable docker
            
            # Add the current user to the Docker group
            sudo usermod -aG docker $USER
            
            # Install Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            
            echo "Docker installation completed"
          else
            echo "Docker is already installed"
          fi
          
          # Verify Docker installation
          docker --version && docker-compose --version || { echo "Docker verification failed"; exit 1; }
    
    - name: Deploy with Docker Compose
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_VPS_HOST }}
        username: ubuntu
        key: ${{ secrets.DEV_VPS_SSH_KEY }}
        script: |
          cd ~/component-store-api-dev
          
          # Check if Dockerfile exists
          if [ ! -f "Dockerfile" ]; then
            echo "Error: Dockerfile not found in the directory"
            exit 1
          fi
          
          # Create docker-compose for development
          cat > docker-compose.dev.yaml << 'EOL'
          version: "3.8"

          services:
            # Node.js API for development
            api-dev:
              build:
                context: .
                dockerfile: Dockerfile
              container_name: component-store-api-dev
              restart: unless-stopped
              ports:
                - "3001:3000"
              environment:
                NODE_ENV: development
                PORT: 3000
                DATABASE_URL: ${DATABASE_URL}
                PAYPAL_API_CLIENT: ${PAYPAL_API_CLIENT}
                PAYPAL_API_SECRET: ${PAYPAL_API_SECRET}
                PAYPAL_API_URL: ${PAYPAL_API_URL}
                HOST: ${HOST}
                JWT_SECRET: ${JWT_SECRET}
              volumes:
                - ./src/public:/app/src/public:ro
              command: sh -c "npx prisma migrate deploy && npm run dev"
              healthcheck:
                test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api-docs"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          EOL
          
          # Build and deploy
          echo "Building development image..."
          sudo docker-compose -f docker-compose.dev.yaml build --no-cache
          
          echo "Stopping existing containers..."
          sudo docker-compose -f docker-compose.dev.yaml down
          
          echo "Starting development containers..."
          sudo docker-compose -f docker-compose.dev.yaml up -d
          
          # Wait for container to start
          echo "Waiting for container to start..."
          sleep 15
          
          # Check container status
          if ! sudo docker ps | grep -q component-store-api-dev; then
            echo "Container not running, checking logs..."
            sudo docker-compose -f docker-compose.dev.yaml logs api-dev
            exit 1
          fi
          
          echo "Development deployment successful"
    
    - name: Verify Development Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_VPS_HOST }}
        username: ubuntu
        key: ${{ secrets.DEV_VPS_SSH_KEY }}
        script: |
          # Wait for application to fully start
          sleep 20
          
          # Verify endpoint is responding
          if curl -s http://localhost:3001/api-docs > /dev/null; then
            echo "Application successfully deployed and responding"
          else
            echo "Application is not responding. Checking logs..."
            sudo docker-compose -f ~/component-store-api-dev/docker-compose.dev.yaml logs api-dev --tail=50
            exit 1
          fi

  cleanup-old-deployments:
    runs-on: ubuntu-latest
    needs: deploy-development
    if: always()
    
    steps:
    - name: Cleanup old Docker images
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_VPS_HOST }}
        username: ubuntu
        key: ${{ secrets.DEV_VPS_SSH_KEY }}
        script: |
          echo "Cleaning up old Docker images..."
          sudo docker image prune -f
          sudo docker system prune -f
          echo "Cleanup completed"